{"version":3,"sources":["cryptomonedas.png","components/Criptomoneda.js","components/Formulario.js","components/Cotizacion.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Criptomoneda","cripto","value","Name","FullName","Formulario","setMonedaParent","setCriptomonedaParent","useState","getCripto","setCripto","getMoneda","setMoneda","getCriptoCotizar","setCriptoCotizar","getError","setError","useEffect","a","axios","get","resultado","data","Data","getAPI","onSubmit","e","preventDefault","length","className","onChange","target","map","x","key","CoinInfo","Id","type","showError","Cotizacion","result","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","App","getCriptomoneda","setCriptomoneda","getSpinner","setSpinner","getResult","setResult","url","DISPLAY","cotizarCriptomoneda","src","imagen","alt","Object","entries","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7df7975f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React from 'react';\n\nexport default function Criptomoneda({cripto}) {\n  return(\n    <option value={cripto.Name}>{cripto.FullName}</option>\n  )\n}","import React, {useState, useEffect} from 'react';\nimport axios from 'axios'\nimport Criptomoneda from './Criptomoneda'\n\nexport default function Formulario({setMonedaParent, setCriptomonedaParent}){\n\n  const [getCripto, setCripto] = useState([])\n  const [getMoneda, setMoneda] = useState('')\n  const [getCriptoCotizar, setCriptoCotizar] = useState('')\n  const [getError, setError] = useState(false)\n\n  useEffect(() => {\n    const getAPI = async () => {\n      const url = 'https://min-api.cryptocompare.com/data/top/totaltoptiervolfull?limit=15&tsym=USD';\n      const resultado = await axios.get(url)\n\n      setCripto(resultado.data.Data) \n    }\n    getAPI()\n  },[])\n\n  const cotizarMoneda = e => {\n    e.preventDefault()\n    if(getMoneda.length && getCriptoCotizar.length){\n      setError(false)\n\n      setCriptomonedaParent(getCriptoCotizar)\n      setMonedaParent(getMoneda)\n    }else{\n      setError(true)\n    }\n  }\n\n  const showError = () =>{\n    if(getError) return (<p className=\"error\">Debes completar todos los campos</p>)\n  }\n\n  return(\n    <form onSubmit={cotizarMoneda} >\n      <div className=\"row\">\n        <label>Elige tu Moneda</label>\n        <select className=\"u-full-width\" onChange={e => setMoneda(e.target.value)}>\n          <option value=\"\">- Elige tu moneda -</option>\n          <option value=\"USD\">Dolar Estadounidence</option>\n          <option value=\"ARS\">Peso Argentino</option>\n          <option value=\"MXN\">Peso Mexicano</option>\n          <option value=\"GBP\">Libras</option>\n          <option value=\"EUR\">Euro</option>\n        </select>\n      </div>\n      <div className=\"row\">\n        <label>Elige tu Moneda</label>\n        <select className=\"u-full-width\" onChange={e => setCriptoCotizar(e.target.value)}>\n          <option value=\"\">- Elige tu criptomoneda -</option>\n          {getCripto.map(x => (\n            <Criptomoneda key={x.CoinInfo.Id} cripto={x.CoinInfo}/>\n          ))}\n        </select>\n      </div>\n      <input type=\"submit\" className=\"button-primary u-full-width\" value=\"Calcular\"/>\n      {showError()}\n    </form>\n  )\n}","import React from 'react';\n\nconst Cotizacion = ({result}) => {\n  return (  \n    <div className=\"resultado\">\n      <h2>Resultado</h2>\n      <p className=\"precio\">El precio es <span>{result.PRICE}</span></p>\n      <p>Precio más alto del día: <span> {result.HIGHDAY}</span></p>\n      <p>Precio más Bajo del día: <span> {result.LOWDAY}</span></p>\n      <p>Variacion ultimas 24hs: <span> {result.CHANGEPCT24HOUR}</span></p>\n      <p>Ultima Actualizacion: <span> {result.LASTUPDATE}</span></p>\n    </div>\n  )\n}\n \nexport default Cotizacion;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios'\nimport imagen from './cryptomonedas.png';\nimport Formulario from './components/Formulario'\nimport Cotizacion from './components/Cotizacion'\n\n\nfunction App() {\n\n  const [getMoneda, setMoneda] = useState('')\n  const [getCriptomoneda, setCriptomoneda] = useState('')\n  const [getSpinner, setSpinner] = useState(false)\n  const [getResult, setResult] = useState({})\n\n  useEffect(()=>{\n    if(getMoneda.length){\n      const cotizarCriptomoneda = async () => {\n        let url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${getCriptomoneda}&tsyms=${getMoneda}`\n  \n        setSpinner(true)\n        const resultado = await axios.get(url)\n        setResult(resultado.data.DISPLAY[getCriptomoneda][getMoneda])\n        setSpinner(false)\n      }\n      cotizarCriptomoneda()\n    }\n  },[getMoneda, getCriptomoneda])\n\n  const _spinner = () => {\n    if(getSpinner){\n      return(\n        <div className=\"spinner\">\n          <div className=\"rect1\"></div>\n          <div className=\"rect2\"></div>\n          <div className=\"rect3\"></div>\n          <div className=\"rect4\"></div>\n          <div className=\"rect5\"></div>\n        </div>\n      )\n    }else if(Object.entries(getResult).length){\n      return <Cotizacion result={getResult}/>\n    }\n  }\n\n  return (\n    <div className=\"container\"> \n      <div className=\"row\">\n        <div className=\"one-half column\">\n          <img src={imagen} alt=\"criptomonedas\" className=\"logotipo\"/>\n        </div>\n        <div className=\"one-half column\">\n          <h1>Cotiza Criptomonedas al Instante</h1>\n          <Formulario\n            setMonedaParent={setMoneda}\n            setCriptomonedaParent={setCriptomoneda}\n          />\n          {_spinner()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}